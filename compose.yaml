version: '3.8'
services:
  fastapi_app:
    build:
      context: .
      args:
        APP_PORT: ${APP_LOCAL_PORT-8000}
    ports:
      - '8000:8000'
    secrets:
      - key_encode_secret
      - access_token_secret
      - refresh_token_secret
      - verification_token_secret
      - reset_password_token_secret
      - sendgrid_api_key
      - postgres_password
      - google_oauth_config
      - github_oauth_config
    env_file:
      - ${APP_ENV_FILE}
    environment:
      - SECRETS_DIR=/run/secrets
      - POSTGRES_HOST=postgres_db
      - REDIS_HOST=redis
    depends_on:
      - postgres_db
      - redis

  redis:
    image: redis:latest
    expose:
      - 6379
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes


  postgres_db:
    image: postgres:16
    restart: always
    secrets:
      - postgres_password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    expose:
      - 5432
    ports:
      - '5433:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-data:
  redis-data:

secrets:
  postgres_password:
    file: ${POSTGRES_PASSWORD_FILE}
  access_token_secret:
    file: ${ACCESS_TOKEN_SECRET_FILE}
  refresh_token_secret:
    file: ${REFRESH_TOKEN_SECRET_FILE}
  verification_token_secret:
    file: ${VERIFICATION_TOKEN_SECRET_FILE}
  reset_password_token_secret:
    file: ${RESET_PASSWORD_TOKEN_SECRET_FILE}
  sendgrid_api_key:
    file: ${SENDGRID_API_KEY_FILE}
  key_encode_secret:
    file: ${KEY_ENCODE_SECRET_FILE}
  google_oauth_config:
    file: ${GOOGLE_OAUTH_CONFIG_FILE}
  github_oauth_config:
    file: ${GITHUB_OAUTH_CONFIG_FILE}
